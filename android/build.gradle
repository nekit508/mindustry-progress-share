import arc.files.Fi

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.$mindustryDependencyType:core:$mindustryVersion"

    implementation project(":core")

    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
}

ext {
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: rootProject.ext.localProperties.get("sdkroot")
    rawFile = "raw-${rootProject.ext.getOutputJar(project)}"
    dexFile = new File(project.buildDir, "dex-${rootProject.ext.getOutputJar(project)}")
    useandroid = rootProject.ext.localProperties.get("useandroid")
    if (useandroid == null)
        useandroid = true
}

task createAndroidJar(type: Jar) {
    archiveFileName = rootProject.ext.getOutputJar(project)

    from {
        [zipTree("$project.buildDir/libs/$rawFile"), zipTree(dexFile)]
    }

    doLast {
        delete {
            "$project.buildDir/libs/$rawFile"
        }
        project.ext.copyPaths.each { file ->
            file.mkdirs()
            rootProject.ext.moveFile(new Fi(archiveFile.get().asFile), file)
        }
    }
}

task dex {
    doLast{
        println "Use android ${useandroid}."
        println "${useandroid == null || useandroid == true}, $useandroid"
        if (useandroid) {
            if (!sdkRoot || !new File(sdkRoot).exists())
                throw new GradleException("No valid Android SDK found.")
            def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find {
                f -> new File(f, "android.jar").exists()
            }
            if (!platformRoot)
                throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

            var classpath = (configurations.compileClasspath.asList()
                    + configurations.runtimeClasspath.asList()
                    + [new File(platformRoot, "android.jar")])
            var dependencies = ""
            for(def path : classpath){
                dependencies += "--classpath "
                dependencies += path.path + " "
            }

            "d8 $dependencies --min-api 14 --output $dexFile.absolutePath $project.buildDir/libs/$rawFile"
                    .execute(null, projectDir).waitForProcessOutput(System.out, System.err)
        }
    }

    if (useandroid)
        finalizedBy project.tasks.createAndroidJar
}

project.tasks.named("jar").configure {
    archiveFileName = rawFile
    finalizedBy project.tasks.dex
}